
BluePill_3D_Printer_SD_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ac0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000bf0  08000bf8  00010bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000bf0  08000bf0  00010bf8  2**0
                  CONTENTS
  4 .ARM          00000000  08000bf0  08000bf0  00010bf8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bf0  08000bf8  00010bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bf0  08000bf0  00010bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000bf4  08000bf4  00010bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000bf8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000bf8  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010bf8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000be9  00000000  00000000  00010c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000055a  00000000  00000000  0001180a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  00011d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000120  00000000  00000000  00011ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000562  00000000  00000000  00012010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f9d  00000000  00000000  00012572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004ba6  00000000  00000000  0001350f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000180b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000450  00000000  00000000  00018108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000bd8 	.word	0x08000bd8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000bd8 	.word	0x08000bd8

08000170 <Delay_vMsIn16MHz>:

/*
*		Function To Delay By Milliseconds ( 16MHz CPU CLK )
*/
extern void Delay_vMsIn16MHz(u16 Copy_u16CountNum)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	volatile u16 u16Local_Count1 ;
	volatile u16 u16Local_Count2 ;
	for(u16Local_Count1 = 0; u16Local_Count1 < Copy_u16CountNum; u16Local_Count1++)
 800017a:	2300      	movs	r3, #0
 800017c:	81fb      	strh	r3, [r7, #14]
 800017e:	e012      	b.n	80001a6 <Delay_vMsIn16MHz+0x36>
	for(u16Local_Count2 = 0; u16Local_Count2 < 3180  ; u16Local_Count2++)
 8000180:	2300      	movs	r3, #0
 8000182:	81bb      	strh	r3, [r7, #12]
 8000184:	e004      	b.n	8000190 <Delay_vMsIn16MHz+0x20>
 8000186:	89bb      	ldrh	r3, [r7, #12]
 8000188:	b29b      	uxth	r3, r3
 800018a:	3301      	adds	r3, #1
 800018c:	b29b      	uxth	r3, r3
 800018e:	81bb      	strh	r3, [r7, #12]
 8000190:	89bb      	ldrh	r3, [r7, #12]
 8000192:	b29b      	uxth	r3, r3
 8000194:	f640 426b 	movw	r2, #3179	; 0xc6b
 8000198:	4293      	cmp	r3, r2
 800019a:	d9f4      	bls.n	8000186 <Delay_vMsIn16MHz+0x16>
	for(u16Local_Count1 = 0; u16Local_Count1 < Copy_u16CountNum; u16Local_Count1++)
 800019c:	89fb      	ldrh	r3, [r7, #14]
 800019e:	b29b      	uxth	r3, r3
 80001a0:	3301      	adds	r3, #1
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	81fb      	strh	r3, [r7, #14]
 80001a6:	89fb      	ldrh	r3, [r7, #14]
 80001a8:	b29b      	uxth	r3, r3
 80001aa:	88fa      	ldrh	r2, [r7, #6]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d8e7      	bhi.n	8000180 <Delay_vMsIn16MHz+0x10>
	{} // Do nothing for 1 ms
}
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
 80001b4:	3714      	adds	r7, #20
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr

080001bc <MGIO_vResetCR>:
/*======================================*/	

/*============================================   Start_Function   ============================================*/

void MGIO_vResetCR(u8 Copy_u8PortName, u8 Copy_u8PinNum)
{
 80001bc:	b480      	push	{r7}
 80001be:	b083      	sub	sp, #12
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	460a      	mov	r2, r1
 80001c6:	71fb      	strb	r3, [r7, #7]
 80001c8:	4613      	mov	r3, r2
 80001ca:	71bb      	strb	r3, [r7, #6]
	switch (Copy_u8PortName)
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	d022      	beq.n	8000218 <MGIO_vResetCR+0x5c>
 80001d2:	2b02      	cmp	r3, #2
 80001d4:	dc2e      	bgt.n	8000234 <MGIO_vResetCR+0x78>
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d002      	beq.n	80001e0 <MGIO_vResetCR+0x24>
 80001da:	2b01      	cmp	r3, #1
 80001dc:	d00e      	beq.n	80001fc <MGIO_vResetCR+0x40>
		else
		{ /* No Action */

		}
	break;
	default: 					        break;
 80001de:	e029      	b.n	8000234 <MGIO_vResetCR+0x78>
		if (Copy_u8PinNum <= 7)
 80001e0:	79bb      	ldrb	r3, [r7, #6]
 80001e2:	2b07      	cmp	r3, #7
 80001e4:	d803      	bhi.n	80001ee <MGIO_vResetCR+0x32>
		GPIOA_CRL = 0;
 80001e6:	4b19      	ldr	r3, [pc, #100]	; (800024c <MGIO_vResetCR+0x90>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
	break;
 80001ec:	e024      	b.n	8000238 <MGIO_vResetCR+0x7c>
		else if(Copy_u8PinNum >= 8)
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	2b07      	cmp	r3, #7
 80001f2:	d921      	bls.n	8000238 <MGIO_vResetCR+0x7c>
		GPIOA_CRH = 0;
 80001f4:	4b16      	ldr	r3, [pc, #88]	; (8000250 <MGIO_vResetCR+0x94>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
	break;
 80001fa:	e01d      	b.n	8000238 <MGIO_vResetCR+0x7c>
		if (Copy_u8PinNum <= 7)
 80001fc:	79bb      	ldrb	r3, [r7, #6]
 80001fe:	2b07      	cmp	r3, #7
 8000200:	d803      	bhi.n	800020a <MGIO_vResetCR+0x4e>
		GPIOB_CRL = 0;
 8000202:	4b14      	ldr	r3, [pc, #80]	; (8000254 <MGIO_vResetCR+0x98>)
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
	break;
 8000208:	e018      	b.n	800023c <MGIO_vResetCR+0x80>
		else if(Copy_u8PinNum >= 8)
 800020a:	79bb      	ldrb	r3, [r7, #6]
 800020c:	2b07      	cmp	r3, #7
 800020e:	d915      	bls.n	800023c <MGIO_vResetCR+0x80>
		GPIOB_CRH = 0;
 8000210:	4b11      	ldr	r3, [pc, #68]	; (8000258 <MGIO_vResetCR+0x9c>)
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
	break;
 8000216:	e011      	b.n	800023c <MGIO_vResetCR+0x80>
		if ( Copy_u8PinNum <= 7)
 8000218:	79bb      	ldrb	r3, [r7, #6]
 800021a:	2b07      	cmp	r3, #7
 800021c:	d803      	bhi.n	8000226 <MGIO_vResetCR+0x6a>
		GPIOC_CRL = 0;
 800021e:	4b0f      	ldr	r3, [pc, #60]	; (800025c <MGIO_vResetCR+0xa0>)
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
	break;
 8000224:	e00c      	b.n	8000240 <MGIO_vResetCR+0x84>
		else if(Copy_u8PinNum >= 8)
 8000226:	79bb      	ldrb	r3, [r7, #6]
 8000228:	2b07      	cmp	r3, #7
 800022a:	d909      	bls.n	8000240 <MGIO_vResetCR+0x84>
		GPIOC_CRH = 0;
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <MGIO_vResetCR+0xa4>)
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
	break;
 8000232:	e005      	b.n	8000240 <MGIO_vResetCR+0x84>
	default: 					        break;
 8000234:	bf00      	nop
 8000236:	e004      	b.n	8000242 <MGIO_vResetCR+0x86>
	break;
 8000238:	bf00      	nop
 800023a:	e002      	b.n	8000242 <MGIO_vResetCR+0x86>
	break;
 800023c:	bf00      	nop
 800023e:	e000      	b.n	8000242 <MGIO_vResetCR+0x86>
	break;
 8000240:	bf00      	nop
	}
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40010800 	.word	0x40010800
 8000250:	40010804 	.word	0x40010804
 8000254:	40010c00 	.word	0x40010c00
 8000258:	40010c04 	.word	0x40010c04
 800025c:	40011000 	.word	0x40011000
 8000260:	40011004 	.word	0x40011004

08000264 <MGPIO_vSetPinMode>:
/*============================================   End_Function     ============================================*/
/*============================================   Start_Function   ============================================*/

void MGPIO_vSetPinMode(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8Mode, u8 Copy_u8Config)
{
 8000264:	b490      	push	{r4, r7}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	4604      	mov	r4, r0
 800026c:	4608      	mov	r0, r1
 800026e:	4611      	mov	r1, r2
 8000270:	461a      	mov	r2, r3
 8000272:	4623      	mov	r3, r4
 8000274:	71fb      	strb	r3, [r7, #7]
 8000276:	4603      	mov	r3, r0
 8000278:	71bb      	strb	r3, [r7, #6]
 800027a:	460b      	mov	r3, r1
 800027c:	717b      	strb	r3, [r7, #5]
 800027e:	4613      	mov	r3, r2
 8000280:	713b      	strb	r3, [r7, #4]
	/* Used To Select Between CRL and CRH Registers */
	u8 L_u8Index = 0;
 8000282:	2300      	movs	r3, #0
 8000284:	73fb      	strb	r3, [r7, #15]

	/* Calculate the index of CRL and CRH
	 * Pins <= 7 configured using CR[0]
	 * Pins >= 8 configured using CR [1] */
	if( Copy_u8PinNum <= 7)
 8000286:	79bb      	ldrb	r3, [r7, #6]
 8000288:	2b07      	cmp	r3, #7
 800028a:	d802      	bhi.n	8000292 <MGPIO_vSetPinMode+0x2e>
	{
		L_u8Index = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	73fb      	strb	r3, [r7, #15]
 8000290:	e004      	b.n	800029c <MGPIO_vSetPinMode+0x38>
	}
	else if(Copy_u8PinNum >= 8)
 8000292:	79bb      	ldrb	r3, [r7, #6]
 8000294:	2b07      	cmp	r3, #7
 8000296:	d901      	bls.n	800029c <MGPIO_vSetPinMode+0x38>
	{
		L_u8Index = 1;
 8000298:	2301      	movs	r3, #1
 800029a:	73fb      	strb	r3, [r7, #15]
	}
	/* if condition to get the right pin for CRH or CR[1] register */
	if(Copy_u8PinNum >= 8)
 800029c:	79bb      	ldrb	r3, [r7, #6]
 800029e:	2b07      	cmp	r3, #7
 80002a0:	d902      	bls.n	80002a8 <MGPIO_vSetPinMode+0x44>
	{
		Copy_u8PinNum -= 8;
 80002a2:	79bb      	ldrb	r3, [r7, #6]
 80002a4:	3b08      	subs	r3, #8
 80002a6:	71bb      	strb	r3, [r7, #6]
	}

	switch(Copy_u8PortName)
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	f000 8168 	beq.w	8000580 <MGPIO_vSetPinMode+0x31c>
 80002b0:	2b02      	cmp	r3, #2
 80002b2:	f300 8218 	bgt.w	80006e6 <MGPIO_vSetPinMode+0x482>
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d003      	beq.n	80002c2 <MGPIO_vSetPinMode+0x5e>
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	f000 80b7 	beq.w	800042e <MGPIO_vSetPinMode+0x1ca>
			{
				MGPIOC->CR[L_u8Index] |= (3 << ((4 * Copy_u8PinNum) + 2));
			}
		}
		break;
	default:		break;
 80002c0:	e211      	b.n	80006e6 <MGPIO_vSetPinMode+0x482>
		if(Copy_u8Mode == _MODE_INPUT)
 80002c2:	797b      	ldrb	r3, [r7, #5]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <MGPIO_vSetPinMode+0x100>
			MGPIOA->CR[L_u8Index] &= ~(1 << (4 * Copy_u8PinNum));
 80002c8:	4aab      	ldr	r2, [pc, #684]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 80002ca:	7bfb      	ldrb	r3, [r7, #15]
 80002cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	2101      	movs	r1, #1
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	43db      	mvns	r3, r3
 80002dc:	4618      	mov	r0, r3
 80002de:	49a6      	ldr	r1, [pc, #664]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 80002e0:	7bfb      	ldrb	r3, [r7, #15]
 80002e2:	4002      	ands	r2, r0
 80002e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (Copy_u8Config == _MODE_ANALOG)
 80002e8:	793b      	ldrb	r3, [r7, #4]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d111      	bne.n	8000312 <MGPIO_vSetPinMode+0xae>
				MGPIOA->CR[L_u8Index] &= ~(1 << ((4 * Copy_u8PinNum) + 2 ));
 80002ee:	4aa2      	ldr	r2, [pc, #648]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f6:	79bb      	ldrb	r3, [r7, #6]
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	3302      	adds	r3, #2
 80002fc:	2101      	movs	r1, #1
 80002fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000302:	43db      	mvns	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	499c      	ldr	r1, [pc, #624]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	4002      	ands	r2, r0
 800030c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000310:	e1eb      	b.n	80006ea <MGPIO_vSetPinMode+0x486>
			else if ( Copy_u8Config == _MODE_FLOATING)
 8000312:	793b      	ldrb	r3, [r7, #4]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d110      	bne.n	800033a <MGPIO_vSetPinMode+0xd6>
				MGPIOA->CR[L_u8Index] |= (1 << ((4 * Copy_u8PinNum) + 2));
 8000318:	4a97      	ldr	r2, [pc, #604]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	3302      	adds	r3, #2
 8000326:	2101      	movs	r1, #1
 8000328:	fa01 f303 	lsl.w	r3, r1, r3
 800032c:	4618      	mov	r0, r3
 800032e:	4992      	ldr	r1, [pc, #584]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	4302      	orrs	r2, r0
 8000334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000338:	e1d7      	b.n	80006ea <MGPIO_vSetPinMode+0x486>
			else if ( Copy_u8Config == _MODE_IN_PU_PD)
 800033a:	793b      	ldrb	r3, [r7, #4]
 800033c:	2b02      	cmp	r3, #2
 800033e:	f040 81d4 	bne.w	80006ea <MGPIO_vSetPinMode+0x486>
				MGPIOA->CR[L_u8Index] |= (2 << ((4 * Copy_u8PinNum) + 2));
 8000342:	4a8d      	ldr	r2, [pc, #564]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034a:	79bb      	ldrb	r3, [r7, #6]
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	3302      	adds	r3, #2
 8000350:	2102      	movs	r1, #2
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	4618      	mov	r0, r3
 8000358:	4987      	ldr	r1, [pc, #540]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	4302      	orrs	r2, r0
 800035e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000362:	e1c2      	b.n	80006ea <MGPIO_vSetPinMode+0x486>
		else if (Copy_u8Mode == _MODE_OUTPUT)
 8000364:	797b      	ldrb	r3, [r7, #5]
 8000366:	2b01      	cmp	r3, #1
 8000368:	f040 81bf 	bne.w	80006ea <MGPIO_vSetPinMode+0x486>
			MGPIOA->CR[L_u8Index] |= (1 << (4 * Copy_u8PinNum));
 800036c:	4a82      	ldr	r2, [pc, #520]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 800036e:	7bfb      	ldrb	r3, [r7, #15]
 8000370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	2101      	movs	r1, #1
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
 800037e:	4618      	mov	r0, r3
 8000380:	497d      	ldr	r1, [pc, #500]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 8000382:	7bfb      	ldrb	r3, [r7, #15]
 8000384:	4302      	orrs	r2, r0
 8000386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if ( Copy_u8Config == _MODE_GP_OUT_PUSH_PULL)
 800038a:	793b      	ldrb	r3, [r7, #4]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d111      	bne.n	80003b4 <MGPIO_vSetPinMode+0x150>
				MGPIOA->CR[L_u8Index] &= ~(1 << ((4 * Copy_u8PinNum) + 2));
 8000390:	4a79      	ldr	r2, [pc, #484]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 8000392:	7bfb      	ldrb	r3, [r7, #15]
 8000394:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	009b      	lsls	r3, r3, #2
 800039c:	3302      	adds	r3, #2
 800039e:	2101      	movs	r1, #1
 80003a0:	fa01 f303 	lsl.w	r3, r1, r3
 80003a4:	43db      	mvns	r3, r3
 80003a6:	4618      	mov	r0, r3
 80003a8:	4973      	ldr	r1, [pc, #460]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	4002      	ands	r2, r0
 80003ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80003b2:	e19a      	b.n	80006ea <MGPIO_vSetPinMode+0x486>
			else if (Copy_u8Config == _MODE_GP_OUT_OPEN_DR)
 80003b4:	793b      	ldrb	r3, [r7, #4]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d110      	bne.n	80003dc <MGPIO_vSetPinMode+0x178>
				MGPIOA->CR[L_u8Index] |= (1 << ((4 * Copy_u8PinNum) + 2));
 80003ba:	4a6f      	ldr	r2, [pc, #444]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	3302      	adds	r3, #2
 80003c8:	2101      	movs	r1, #1
 80003ca:	fa01 f303 	lsl.w	r3, r1, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	4969      	ldr	r1, [pc, #420]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 80003d2:	7bfb      	ldrb	r3, [r7, #15]
 80003d4:	4302      	orrs	r2, r0
 80003d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80003da:	e186      	b.n	80006ea <MGPIO_vSetPinMode+0x486>
			else if (Copy_u8Config == _MODE_GP_OUT_ALT_PUSH_PULL)
 80003dc:	793b      	ldrb	r3, [r7, #4]
 80003de:	2b02      	cmp	r3, #2
 80003e0:	d110      	bne.n	8000404 <MGPIO_vSetPinMode+0x1a0>
				MGPIOA->CR[L_u8Index] |= (2 << (( 4 * Copy_u8PinNum) + 2));
 80003e2:	4a65      	ldr	r2, [pc, #404]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 80003e4:	7bfb      	ldrb	r3, [r7, #15]
 80003e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003ea:	79bb      	ldrb	r3, [r7, #6]
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	3302      	adds	r3, #2
 80003f0:	2102      	movs	r1, #2
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	4618      	mov	r0, r3
 80003f8:	495f      	ldr	r1, [pc, #380]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 80003fa:	7bfb      	ldrb	r3, [r7, #15]
 80003fc:	4302      	orrs	r2, r0
 80003fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000402:	e172      	b.n	80006ea <MGPIO_vSetPinMode+0x486>
			else if (Copy_u8Config == _MODE_GP_OUT_ALT_OPEN_DR)
 8000404:	793b      	ldrb	r3, [r7, #4]
 8000406:	2b03      	cmp	r3, #3
 8000408:	f040 816f 	bne.w	80006ea <MGPIO_vSetPinMode+0x486>
				MGPIOA->CR[L_u8Index] |= (3 << ((4 * Copy_u8PinNum) + 2));
 800040c:	4a5a      	ldr	r2, [pc, #360]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000414:	79bb      	ldrb	r3, [r7, #6]
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	3302      	adds	r3, #2
 800041a:	2103      	movs	r1, #3
 800041c:	fa01 f303 	lsl.w	r3, r1, r3
 8000420:	4618      	mov	r0, r3
 8000422:	4955      	ldr	r1, [pc, #340]	; (8000578 <MGPIO_vSetPinMode+0x314>)
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	4302      	orrs	r2, r0
 8000428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800042c:	e15d      	b.n	80006ea <MGPIO_vSetPinMode+0x486>
		if (Copy_u8Mode == _MODE_INPUT)
 800042e:	797b      	ldrb	r3, [r7, #5]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d14d      	bne.n	80004d0 <MGPIO_vSetPinMode+0x26c>
			MGPIOB->CR[L_u8Index] &= ~(1 << (4 * Copy_u8PinNum));
 8000434:	4a51      	ldr	r2, [pc, #324]	; (800057c <MGPIO_vSetPinMode+0x318>)
 8000436:	7bfb      	ldrb	r3, [r7, #15]
 8000438:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800043c:	79bb      	ldrb	r3, [r7, #6]
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	2101      	movs	r1, #1
 8000442:	fa01 f303 	lsl.w	r3, r1, r3
 8000446:	43db      	mvns	r3, r3
 8000448:	4618      	mov	r0, r3
 800044a:	494c      	ldr	r1, [pc, #304]	; (800057c <MGPIO_vSetPinMode+0x318>)
 800044c:	7bfb      	ldrb	r3, [r7, #15]
 800044e:	4002      	ands	r2, r0
 8000450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (Copy_u8Config == _MODE_ANALOG)
 8000454:	793b      	ldrb	r3, [r7, #4]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d111      	bne.n	800047e <MGPIO_vSetPinMode+0x21a>
				MGPIOB->CR[L_u8Index] &= ~(1 << ((4 * Copy_u8PinNum) + 2));
 800045a:	4a48      	ldr	r2, [pc, #288]	; (800057c <MGPIO_vSetPinMode+0x318>)
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000462:	79bb      	ldrb	r3, [r7, #6]
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	3302      	adds	r3, #2
 8000468:	2101      	movs	r1, #1
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	43db      	mvns	r3, r3
 8000470:	4618      	mov	r0, r3
 8000472:	4942      	ldr	r1, [pc, #264]	; (800057c <MGPIO_vSetPinMode+0x318>)
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	4002      	ands	r2, r0
 8000478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800047c:	e137      	b.n	80006ee <MGPIO_vSetPinMode+0x48a>
			else if (Copy_u8Config == _MODE_FLOATING)
 800047e:	793b      	ldrb	r3, [r7, #4]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d110      	bne.n	80004a6 <MGPIO_vSetPinMode+0x242>
				MGPIOB->CR[L_u8Index] |= ( 1 << ((4 * Copy_u8PinNum ) + 2));
 8000484:	4a3d      	ldr	r2, [pc, #244]	; (800057c <MGPIO_vSetPinMode+0x318>)
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048c:	79bb      	ldrb	r3, [r7, #6]
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	3302      	adds	r3, #2
 8000492:	2101      	movs	r1, #1
 8000494:	fa01 f303 	lsl.w	r3, r1, r3
 8000498:	4618      	mov	r0, r3
 800049a:	4938      	ldr	r1, [pc, #224]	; (800057c <MGPIO_vSetPinMode+0x318>)
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	4302      	orrs	r2, r0
 80004a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80004a4:	e123      	b.n	80006ee <MGPIO_vSetPinMode+0x48a>
			else if (Copy_u8Config == _MODE_IN_PU_PD) {
 80004a6:	793b      	ldrb	r3, [r7, #4]
 80004a8:	2b02      	cmp	r3, #2
 80004aa:	f040 8120 	bne.w	80006ee <MGPIO_vSetPinMode+0x48a>
				MGPIOB->CR[L_u8Index] |= ( 2 << ((4 * Copy_u8PinNum ) + 2));
 80004ae:	4a33      	ldr	r2, [pc, #204]	; (800057c <MGPIO_vSetPinMode+0x318>)
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004b6:	79bb      	ldrb	r3, [r7, #6]
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	3302      	adds	r3, #2
 80004bc:	2102      	movs	r1, #2
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	492d      	ldr	r1, [pc, #180]	; (800057c <MGPIO_vSetPinMode+0x318>)
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	4302      	orrs	r2, r0
 80004ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80004ce:	e10e      	b.n	80006ee <MGPIO_vSetPinMode+0x48a>
		else if (Copy_u8Mode == _MODE_OUTPUT)
 80004d0:	797b      	ldrb	r3, [r7, #5]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	f040 810b 	bne.w	80006ee <MGPIO_vSetPinMode+0x48a>
			MGPIOB->CR[L_u8Index] |= (1 << (4 * Copy_u8PinNum));
 80004d8:	4a28      	ldr	r2, [pc, #160]	; (800057c <MGPIO_vSetPinMode+0x318>)
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e0:	79bb      	ldrb	r3, [r7, #6]
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	2101      	movs	r1, #1
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	4923      	ldr	r1, [pc, #140]	; (800057c <MGPIO_vSetPinMode+0x318>)
 80004ee:	7bfb      	ldrb	r3, [r7, #15]
 80004f0:	4302      	orrs	r2, r0
 80004f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if ( Copy_u8Config == _MODE_GP_OUT_PUSH_PULL)
 80004f6:	793b      	ldrb	r3, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d111      	bne.n	8000520 <MGPIO_vSetPinMode+0x2bc>
				MGPIOB->CR[L_u8Index] &= ~(1 << ((4 * Copy_u8PinNum) + 2));
 80004fc:	4a1f      	ldr	r2, [pc, #124]	; (800057c <MGPIO_vSetPinMode+0x318>)
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	3302      	adds	r3, #2
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f303 	lsl.w	r3, r1, r3
 8000510:	43db      	mvns	r3, r3
 8000512:	4618      	mov	r0, r3
 8000514:	4919      	ldr	r1, [pc, #100]	; (800057c <MGPIO_vSetPinMode+0x318>)
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	4002      	ands	r2, r0
 800051a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800051e:	e0e6      	b.n	80006ee <MGPIO_vSetPinMode+0x48a>
			else if (Copy_u8Config == _MODE_GP_OUT_OPEN_DR)
 8000520:	793b      	ldrb	r3, [r7, #4]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d10a      	bne.n	800053c <MGPIO_vSetPinMode+0x2d8>
				MGPIOB->CR[L_u8Index] = (1 << ((4 * Copy_u8PinNum) + 2));
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	3302      	adds	r3, #2
 800052c:	2201      	movs	r2, #1
 800052e:	fa02 f103 	lsl.w	r1, r2, r3
 8000532:	4a12      	ldr	r2, [pc, #72]	; (800057c <MGPIO_vSetPinMode+0x318>)
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 800053a:	e0d8      	b.n	80006ee <MGPIO_vSetPinMode+0x48a>
			else if (Copy_u8Config == _MODE_GP_OUT_ALT_PUSH_PULL)
 800053c:	793b      	ldrb	r3, [r7, #4]
 800053e:	2b02      	cmp	r3, #2
 8000540:	d10a      	bne.n	8000558 <MGPIO_vSetPinMode+0x2f4>
				MGPIOB->CR[L_u8Index] = (2 << ((4 * Copy_u8PinNum) + 2));
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	3302      	adds	r3, #2
 8000548:	2202      	movs	r2, #2
 800054a:	fa02 f103 	lsl.w	r1, r2, r3
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <MGPIO_vSetPinMode+0x318>)
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 8000556:	e0ca      	b.n	80006ee <MGPIO_vSetPinMode+0x48a>
			else if (Copy_u8Config == _MODE_GP_OUT_ALT_OPEN_DR)
 8000558:	793b      	ldrb	r3, [r7, #4]
 800055a:	2b03      	cmp	r3, #3
 800055c:	f040 80c7 	bne.w	80006ee <MGPIO_vSetPinMode+0x48a>
				MGPIOB->CR[L_u8Index] = (3 << ((4 * Copy_u8PinNum) + 2));
 8000560:	79bb      	ldrb	r3, [r7, #6]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	3302      	adds	r3, #2
 8000566:	2203      	movs	r2, #3
 8000568:	fa02 f103 	lsl.w	r1, r2, r3
 800056c:	4a03      	ldr	r2, [pc, #12]	; (800057c <MGPIO_vSetPinMode+0x318>)
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		break;
 8000574:	e0bb      	b.n	80006ee <MGPIO_vSetPinMode+0x48a>
 8000576:	bf00      	nop
 8000578:	40010800 	.word	0x40010800
 800057c:	40010c00 	.word	0x40010c00
		if (Copy_u8Mode == _MODE_INPUT)
 8000580:	797b      	ldrb	r3, [r7, #5]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d14c      	bne.n	8000620 <MGPIO_vSetPinMode+0x3bc>
			MGPIOC->CR[L_u8Index] &= ~(1 << (4 * Copy_u8PinNum));
 8000586:	4a5e      	ldr	r2, [pc, #376]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	2101      	movs	r1, #1
 8000594:	fa01 f303 	lsl.w	r3, r1, r3
 8000598:	43db      	mvns	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	4958      	ldr	r1, [pc, #352]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	4002      	ands	r2, r0
 80005a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (Copy_u8Config == _MODE_ANALOG)
 80005a6:	793b      	ldrb	r3, [r7, #4]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d111      	bne.n	80005d0 <MGPIO_vSetPinMode+0x36c>
				MGPIOC->CR[L_u8Index] &= ~(1 << ((4 * Copy_u8PinNum) + 2));
 80005ac:	4a54      	ldr	r2, [pc, #336]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	3302      	adds	r3, #2
 80005ba:	2101      	movs	r1, #1
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	43db      	mvns	r3, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	494e      	ldr	r1, [pc, #312]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	4002      	ands	r2, r0
 80005ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80005ce:	e090      	b.n	80006f2 <MGPIO_vSetPinMode+0x48e>
			else if (Copy_u8Config == _MODE_FLOATING)
 80005d0:	793b      	ldrb	r3, [r7, #4]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d110      	bne.n	80005f8 <MGPIO_vSetPinMode+0x394>
				MGPIOC->CR[L_u8Index] |= (1 << ((4 * Copy_u8PinNum) + 2));
 80005d6:	4a4a      	ldr	r2, [pc, #296]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	3302      	adds	r3, #2
 80005e4:	2101      	movs	r1, #1
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	4944      	ldr	r1, [pc, #272]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	4302      	orrs	r2, r0
 80005f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80005f6:	e07c      	b.n	80006f2 <MGPIO_vSetPinMode+0x48e>
			else if (Copy_u8Config == _MODE_IN_PU_PD)
 80005f8:	793b      	ldrb	r3, [r7, #4]
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d179      	bne.n	80006f2 <MGPIO_vSetPinMode+0x48e>
				MGPIOC->CR[L_u8Index] |= (2 << ((4 * Copy_u8PinNum) + 2));
 80005fe:	4a40      	ldr	r2, [pc, #256]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	3302      	adds	r3, #2
 800060c:	2102      	movs	r1, #2
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	4618      	mov	r0, r3
 8000614:	493a      	ldr	r1, [pc, #232]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4302      	orrs	r2, r0
 800061a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800061e:	e068      	b.n	80006f2 <MGPIO_vSetPinMode+0x48e>
		else if (Copy_u8Mode == _MODE_OUTPUT)
 8000620:	797b      	ldrb	r3, [r7, #5]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d165      	bne.n	80006f2 <MGPIO_vSetPinMode+0x48e>
			MGPIOC->CR[L_u8Index] |= (1 << (4 * Copy_u8PinNum));
 8000626:	4a36      	ldr	r2, [pc, #216]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	2101      	movs	r1, #1
 8000634:	fa01 f303 	lsl.w	r3, r1, r3
 8000638:	4618      	mov	r0, r3
 800063a:	4931      	ldr	r1, [pc, #196]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	4302      	orrs	r2, r0
 8000640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (Copy_u8Config == _MODE_GP_OUT_PUSH_PULL )
 8000644:	793b      	ldrb	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d111      	bne.n	800066e <MGPIO_vSetPinMode+0x40a>
				MGPIOC->CR[L_u8Index] &= ~(1 << ((4 * Copy_u8PinNum) + 2));
 800064a:	4a2d      	ldr	r2, [pc, #180]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	3302      	adds	r3, #2
 8000658:	2101      	movs	r1, #1
 800065a:	fa01 f303 	lsl.w	r3, r1, r3
 800065e:	43db      	mvns	r3, r3
 8000660:	4618      	mov	r0, r3
 8000662:	4927      	ldr	r1, [pc, #156]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	4002      	ands	r2, r0
 8000668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800066c:	e041      	b.n	80006f2 <MGPIO_vSetPinMode+0x48e>
			else if (Copy_u8Config == _MODE_GP_OUT_OPEN_DR )
 800066e:	793b      	ldrb	r3, [r7, #4]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d110      	bne.n	8000696 <MGPIO_vSetPinMode+0x432>
				MGPIOC->CR[L_u8Index] |= (1 << ((4 * Copy_u8PinNum) + 2));
 8000674:	4a22      	ldr	r2, [pc, #136]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	3302      	adds	r3, #2
 8000682:	2101      	movs	r1, #1
 8000684:	fa01 f303 	lsl.w	r3, r1, r3
 8000688:	4618      	mov	r0, r3
 800068a:	491d      	ldr	r1, [pc, #116]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	4302      	orrs	r2, r0
 8000690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8000694:	e02d      	b.n	80006f2 <MGPIO_vSetPinMode+0x48e>
			else if (Copy_u8Config == _MODE_GP_OUT_ALT_PUSH_PULL)
 8000696:	793b      	ldrb	r3, [r7, #4]
 8000698:	2b02      	cmp	r3, #2
 800069a:	d110      	bne.n	80006be <MGPIO_vSetPinMode+0x45a>
				MGPIOC->CR[L_u8Index] |= (2 << ((4 * Copy_u8PinNum) + 2));
 800069c:	4a18      	ldr	r2, [pc, #96]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	3302      	adds	r3, #2
 80006aa:	2102      	movs	r1, #2
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	4913      	ldr	r1, [pc, #76]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	4302      	orrs	r2, r0
 80006b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80006bc:	e019      	b.n	80006f2 <MGPIO_vSetPinMode+0x48e>
			else if (Copy_u8Config == _MODE_GP_OUT_ALT_OPEN_DR)
 80006be:	793b      	ldrb	r3, [r7, #4]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d116      	bne.n	80006f2 <MGPIO_vSetPinMode+0x48e>
				MGPIOC->CR[L_u8Index] |= (3 << ((4 * Copy_u8PinNum) + 2));
 80006c4:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	3302      	adds	r3, #2
 80006d2:	2103      	movs	r1, #3
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	4909      	ldr	r1, [pc, #36]	; (8000700 <MGPIO_vSetPinMode+0x49c>)
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	4302      	orrs	r2, r0
 80006e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80006e4:	e005      	b.n	80006f2 <MGPIO_vSetPinMode+0x48e>
	default:		break;
 80006e6:	bf00      	nop
 80006e8:	e004      	b.n	80006f4 <MGPIO_vSetPinMode+0x490>
		break;
 80006ea:	bf00      	nop
 80006ec:	e002      	b.n	80006f4 <MGPIO_vSetPinMode+0x490>
		break;
 80006ee:	bf00      	nop
 80006f0:	e000      	b.n	80006f4 <MGPIO_vSetPinMode+0x490>
		break;
 80006f2:	bf00      	nop
	}
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc90      	pop	{r4, r7}
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40011000 	.word	0x40011000

08000704 <MGPIO_vWriteData>:
}
/*============================================   End_Function     ============================================*/
/*============================================   Start_Function   ============================================*/

void MGPIO_vWriteData(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8State)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
 800070e:	460b      	mov	r3, r1
 8000710:	71bb      	strb	r3, [r7, #6]
 8000712:	4613      	mov	r3, r2
 8000714:	717b      	strb	r3, [r7, #5]
	if(Copy_u8State == HIGH)
 8000716:	797b      	ldrb	r3, [r7, #5]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d127      	bne.n	800076c <MGPIO_vWriteData+0x68>
	{
		switch(Copy_u8PortName)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	2b02      	cmp	r3, #2
 8000720:	d01a      	beq.n	8000758 <MGPIO_vWriteData+0x54>
 8000722:	2b02      	cmp	r3, #2
 8000724:	dc4d      	bgt.n	80007c2 <MGPIO_vWriteData+0xbe>
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <MGPIO_vWriteData+0x2c>
 800072a:	2b01      	cmp	r3, #1
 800072c:	d00a      	beq.n	8000744 <MGPIO_vWriteData+0x40>
		{
		case _GPIOA_PORT:MGPIOA->ODR |= (1U << Copy_u8PinNum);		break;
		case _GPIOB_PORT:MGPIOB->ODR |= (1U << Copy_u8PinNum);		break;
		case _GPIOC_PORT:MGPIOC->ODR |= (1U << Copy_u8PinNum);		break;
		default:													break;
 800072e:	e048      	b.n	80007c2 <MGPIO_vWriteData+0xbe>
		case _GPIOA_PORT:MGPIOA->ODR |= (1U << Copy_u8PinNum);		break;
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MGPIO_vWriteData+0xd0>)
 8000732:	68da      	ldr	r2, [r3, #12]
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	2101      	movs	r1, #1
 8000738:	fa01 f303 	lsl.w	r3, r1, r3
 800073c:	4925      	ldr	r1, [pc, #148]	; (80007d4 <MGPIO_vWriteData+0xd0>)
 800073e:	4313      	orrs	r3, r2
 8000740:	60cb      	str	r3, [r1, #12]
 8000742:	e041      	b.n	80007c8 <MGPIO_vWriteData+0xc4>
		case _GPIOB_PORT:MGPIOB->ODR |= (1U << Copy_u8PinNum);		break;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MGPIO_vWriteData+0xd4>)
 8000746:	68da      	ldr	r2, [r3, #12]
 8000748:	79bb      	ldrb	r3, [r7, #6]
 800074a:	2101      	movs	r1, #1
 800074c:	fa01 f303 	lsl.w	r3, r1, r3
 8000750:	4921      	ldr	r1, [pc, #132]	; (80007d8 <MGPIO_vWriteData+0xd4>)
 8000752:	4313      	orrs	r3, r2
 8000754:	60cb      	str	r3, [r1, #12]
 8000756:	e037      	b.n	80007c8 <MGPIO_vWriteData+0xc4>
		case _GPIOC_PORT:MGPIOC->ODR |= (1U << Copy_u8PinNum);		break;
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MGPIO_vWriteData+0xd8>)
 800075a:	68da      	ldr	r2, [r3, #12]
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	491d      	ldr	r1, [pc, #116]	; (80007dc <MGPIO_vWriteData+0xd8>)
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
 800076a:	e02d      	b.n	80007c8 <MGPIO_vWriteData+0xc4>
		}
	}
	else
	{
		switch(Copy_u8PortName)
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d01c      	beq.n	80007ac <MGPIO_vWriteData+0xa8>
 8000772:	2b02      	cmp	r3, #2
 8000774:	dc27      	bgt.n	80007c6 <MGPIO_vWriteData+0xc2>
 8000776:	2b00      	cmp	r3, #0
 8000778:	d002      	beq.n	8000780 <MGPIO_vWriteData+0x7c>
 800077a:	2b01      	cmp	r3, #1
 800077c:	d00b      	beq.n	8000796 <MGPIO_vWriteData+0x92>
		{
		case _GPIOA_PORT:MGPIOA->ODR &= ~(1U << Copy_u8PinNum);		break;
		case _GPIOB_PORT:MGPIOB->ODR &= ~(1U << Copy_u8PinNum);		break;
		case _GPIOC_PORT:MGPIOC->ODR &= ~(1U << Copy_u8PinNum);		break;
		default:													break;
 800077e:	e022      	b.n	80007c6 <MGPIO_vWriteData+0xc2>
		case _GPIOA_PORT:MGPIOA->ODR &= ~(1U << Copy_u8PinNum);		break;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MGPIO_vWriteData+0xd0>)
 8000782:	68da      	ldr	r2, [r3, #12]
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2101      	movs	r1, #1
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	43db      	mvns	r3, r3
 800078e:	4911      	ldr	r1, [pc, #68]	; (80007d4 <MGPIO_vWriteData+0xd0>)
 8000790:	4013      	ands	r3, r2
 8000792:	60cb      	str	r3, [r1, #12]
 8000794:	e018      	b.n	80007c8 <MGPIO_vWriteData+0xc4>
		case _GPIOB_PORT:MGPIOB->ODR &= ~(1U << Copy_u8PinNum);		break;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MGPIO_vWriteData+0xd4>)
 8000798:	68da      	ldr	r2, [r3, #12]
 800079a:	79bb      	ldrb	r3, [r7, #6]
 800079c:	2101      	movs	r1, #1
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	43db      	mvns	r3, r3
 80007a4:	490c      	ldr	r1, [pc, #48]	; (80007d8 <MGPIO_vWriteData+0xd4>)
 80007a6:	4013      	ands	r3, r2
 80007a8:	60cb      	str	r3, [r1, #12]
 80007aa:	e00d      	b.n	80007c8 <MGPIO_vWriteData+0xc4>
		case _GPIOC_PORT:MGPIOC->ODR &= ~(1U << Copy_u8PinNum);		break;
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MGPIO_vWriteData+0xd8>)
 80007ae:	68da      	ldr	r2, [r3, #12]
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	2101      	movs	r1, #1
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	43db      	mvns	r3, r3
 80007ba:	4908      	ldr	r1, [pc, #32]	; (80007dc <MGPIO_vWriteData+0xd8>)
 80007bc:	4013      	ands	r3, r2
 80007be:	60cb      	str	r3, [r1, #12]
 80007c0:	e002      	b.n	80007c8 <MGPIO_vWriteData+0xc4>
		default:													break;
 80007c2:	bf00      	nop
 80007c4:	e000      	b.n	80007c8 <MGPIO_vWriteData+0xc4>
		default:													break;
 80007c6:	bf00      	nop
		}
	}
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40010800 	.word	0x40010800
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	40011000 	.word	0x40011000

080007e0 <MRCC_vEnableClock>:
							       - Copy_u8PerName :  The Order Of Peripheral On The Selected Register
	
*/

void MRCC_vEnableClock( BusName_t BusName , u8 Copy_u8PerNum )
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	460a      	mov	r2, r1
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	4613      	mov	r3, r2
 80007ee:	71bb      	strb	r3, [r7, #6]
	switch(BusName)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d01a      	beq.n	800082c <MRCC_vEnableClock+0x4c>
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	dc22      	bgt.n	8000840 <MRCC_vEnableClock+0x60>
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <MRCC_vEnableClock+0x24>
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d00a      	beq.n	8000818 <MRCC_vEnableClock+0x38>
	{
		case AHB     :   SET_BIT( RCC_AHBENR,Copy_u8PerNum );         break ;
		case APB1    :  SET_BIT( RCC_APB1ENR,Copy_u8PerNum );         break ;
		case APB2    :  SET_BIT( RCC_APB2ENR,Copy_u8PerNum );         break ;
		default :     /* ERROR */          					   	      break ;
 8000802:	e01d      	b.n	8000840 <MRCC_vEnableClock+0x60>
		case AHB     :   SET_BIT( RCC_AHBENR,Copy_u8PerNum );         break ;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MRCC_vEnableClock+0x6c>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	2101      	movs	r1, #1
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	490e      	ldr	r1, [pc, #56]	; (800084c <MRCC_vEnableClock+0x6c>)
 8000812:	4313      	orrs	r3, r2
 8000814:	600b      	str	r3, [r1, #0]
 8000816:	e014      	b.n	8000842 <MRCC_vEnableClock+0x62>
		case APB1    :  SET_BIT( RCC_APB1ENR,Copy_u8PerNum );         break ;
 8000818:	4b0d      	ldr	r3, [pc, #52]	; (8000850 <MRCC_vEnableClock+0x70>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	79bb      	ldrb	r3, [r7, #6]
 800081e:	2101      	movs	r1, #1
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	490a      	ldr	r1, [pc, #40]	; (8000850 <MRCC_vEnableClock+0x70>)
 8000826:	4313      	orrs	r3, r2
 8000828:	600b      	str	r3, [r1, #0]
 800082a:	e00a      	b.n	8000842 <MRCC_vEnableClock+0x62>
		case APB2    :  SET_BIT( RCC_APB2ENR,Copy_u8PerNum );         break ;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MRCC_vEnableClock+0x74>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	2101      	movs	r1, #1
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	4906      	ldr	r1, [pc, #24]	; (8000854 <MRCC_vEnableClock+0x74>)
 800083a:	4313      	orrs	r3, r2
 800083c:	600b      	str	r3, [r1, #0]
 800083e:	e000      	b.n	8000842 <MRCC_vEnableClock+0x62>
		default :     /* ERROR */          					   	      break ;
 8000840:	bf00      	nop
	}
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	40021014 	.word	0x40021014
 8000850:	4002101c 	.word	0x4002101c
 8000854:	40021018 	.word	0x40021018

08000858 <MRCC_vInitSystemCLK>:
				- PLLSrc	: PLL_HSE | PLL_HSI
				- HSESrc    : HSE_Crystal ,HSE_RC
 */

extern void MRCC_vInitSystemCLK(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
#elif CLKSRC == HSE

	#if HSE_SRC == CRYSTAL 
	
		/* 1- Disable BYP */
		CLR_BIT( MRCC->CR, 18U );
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MRCC_vInitSystemCLK+0x3c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <MRCC_vInitSystemCLK+0x3c>)
 8000862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000866:	6013      	str	r3, [r2, #0]
		/* 2- CLK SYS --> HSE */
		SET_BIT( MRCC->CFGR, 0U );
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MRCC_vInitSystemCLK+0x3c>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	4a09      	ldr	r2, [pc, #36]	; (8000894 <MRCC_vInitSystemCLK+0x3c>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6053      	str	r3, [r2, #4]
		CLR_BIT( MRCC->CFGR, 1U );
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MRCC_vInitSystemCLK+0x3c>)
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	4a06      	ldr	r2, [pc, #24]	; (8000894 <MRCC_vInitSystemCLK+0x3c>)
 800087a:	f023 0302 	bic.w	r3, r3, #2
 800087e:	6053      	str	r3, [r2, #4]
		/* 3- EN HSE */
		SET_BIT( MRCC->CR , 16U );
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <MRCC_vInitSystemCLK+0x3c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a03      	ldr	r2, [pc, #12]	; (8000894 <MRCC_vInitSystemCLK+0x3c>)
 8000886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088a:	6013      	str	r3, [r2, #0]
	#endif
/****************************************************/

#else /* Error */
#endif
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	40021000 	.word	0x40021000

08000898 <SPI1_IRQHandler>:
	M_SPI1_CallBack = ptr;
}
/***************************************  END_ FUNCTION   ****************************************/

/*************************************** START_ FUNCTION   ***************************************/
void SPI1_IRQHandler(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

	M_SPI1_CallBack();
 800089c:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <SPI1_IRQHandler+0x10>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4798      	blx	r3
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2000001c 	.word	0x2000001c

080008ac <HAL_StepperInit>:
#include "Stepper_interface.h"
/*======================================*/

/*==========================================   Start_Function   ==========================================*/
extern void HAL_StepperInit(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	MGPIO_vSetPinMode(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_1_PIN , _MODE_OUTPUT, _MODE_GP_OUT_PUSH_PULL);
 80008b0:	2300      	movs	r3, #0
 80008b2:	2201      	movs	r2, #1
 80008b4:	2103      	movs	r1, #3
 80008b6:	2001      	movs	r0, #1
 80008b8:	f7ff fcd4 	bl	8000264 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_2_PIN , _MODE_OUTPUT, _MODE_GP_OUT_PUSH_PULL);
 80008bc:	2300      	movs	r3, #0
 80008be:	2201      	movs	r2, #1
 80008c0:	2104      	movs	r1, #4
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff fcce 	bl	8000264 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_3_PIN , _MODE_OUTPUT, _MODE_GP_OUT_PUSH_PULL);
 80008c8:	2300      	movs	r3, #0
 80008ca:	2201      	movs	r2, #1
 80008cc:	2105      	movs	r1, #5
 80008ce:	2001      	movs	r0, #1
 80008d0:	f7ff fcc8 	bl	8000264 <MGPIO_vSetPinMode>
	MGPIO_vSetPinMode(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_4_PIN , _MODE_OUTPUT, _MODE_GP_OUT_PUSH_PULL);
 80008d4:	2300      	movs	r3, #0
 80008d6:	2201      	movs	r2, #1
 80008d8:	2106      	movs	r1, #6
 80008da:	2001      	movs	r0, #1
 80008dc:	f7ff fcc2 	bl	8000264 <MGPIO_vSetPinMode>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_StepperRotateCWHalfStep>:
	}
}
/*==========================================   End_Function     ==========================================*/
/*==========================================   Start_Function   ==========================================*/
extern void HAL_StepperRotateCWHalfStep(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
	u8 L_u8Counter = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	71fb      	strb	r3, [r7, #7]
	u8 L_u8Coil    = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	70bb      	strb	r3, [r7, #2]
	u8 L_u8Flag1   = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	71bb      	strb	r3, [r7, #6]
	u8 L_u8Flag2   = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	717b      	strb	r3, [r7, #5]
	u8 L_u8Flag3   = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	713b      	strb	r3, [r7, #4]
	u8 L_u8Flag4   = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	70fb      	strb	r3, [r7, #3]

	for(L_u8Counter = 0; L_u8Counter < STEPPER_MOTOR_STEPS; L_u8Counter++)
 8000902:	2300      	movs	r3, #0
 8000904:	71fb      	strb	r3, [r7, #7]
 8000906:	e0fe      	b.n	8000b06 <HAL_StepperRotateCWHalfStep+0x222>
	{
		L_u8Coil = ((L_u8Counter % 4) + 3);
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 0303 	and.w	r3, r3, #3
 800090e:	b2db      	uxtb	r3, r3
 8000910:	3303      	adds	r3, #3
 8000912:	70bb      	strb	r3, [r7, #2]

		/* 1st */
		if(L_u8Coil == 3 && L_u8Flag1 == 0)
 8000914:	78bb      	ldrb	r3, [r7, #2]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d11c      	bne.n	8000954 <HAL_StepperRotateCWHalfStep+0x70>
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d119      	bne.n	8000954 <HAL_StepperRotateCWHalfStep+0x70>
		{
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_1_PIN, LOW);
 8000920:	2200      	movs	r2, #0
 8000922:	2103      	movs	r1, #3
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff feed 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_2_PIN, LOW);
 800092a:	2200      	movs	r2, #0
 800092c:	2104      	movs	r1, #4
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fee8 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_3_PIN, LOW);
 8000934:	2200      	movs	r2, #0
 8000936:	2105      	movs	r1, #5
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fee3 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_4_PIN, HIGH);
 800093e:	2201      	movs	r2, #1
 8000940:	2106      	movs	r1, #6
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff fede 	bl	8000704 <MGPIO_vWriteData>
		L_u8Flag1 = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	71bb      	strb	r3, [r7, #6]
		L_u8Counter--;
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	3b01      	subs	r3, #1
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	e0d2      	b.n	8000afa <HAL_StepperRotateCWHalfStep+0x216>
		}
		else if(L_u8Coil == 3 && L_u8Flag1 == 1)
 8000954:	78bb      	ldrb	r3, [r7, #2]
 8000956:	2b03      	cmp	r3, #3
 8000958:	d119      	bne.n	800098e <HAL_StepperRotateCWHalfStep+0xaa>
 800095a:	79bb      	ldrb	r3, [r7, #6]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d116      	bne.n	800098e <HAL_StepperRotateCWHalfStep+0xaa>
		{
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_1_PIN, LOW);
 8000960:	2200      	movs	r2, #0
 8000962:	2103      	movs	r1, #3
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fecd 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_2_PIN, LOW);
 800096a:	2200      	movs	r2, #0
 800096c:	2104      	movs	r1, #4
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fec8 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_3_PIN, HIGH);
 8000974:	2201      	movs	r2, #1
 8000976:	2105      	movs	r1, #5
 8000978:	2001      	movs	r0, #1
 800097a:	f7ff fec3 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_4_PIN, HIGH);
 800097e:	2201      	movs	r2, #1
 8000980:	2106      	movs	r1, #6
 8000982:	2001      	movs	r0, #1
 8000984:	f7ff febe 	bl	8000704 <MGPIO_vWriteData>
		L_u8Flag1 = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	71bb      	strb	r3, [r7, #6]
 800098c:	e0b5      	b.n	8000afa <HAL_StepperRotateCWHalfStep+0x216>
		}

		/* 2nd */
		else if(L_u8Coil == 4 && L_u8Flag2 == 0)
 800098e:	78bb      	ldrb	r3, [r7, #2]
 8000990:	2b04      	cmp	r3, #4
 8000992:	d11c      	bne.n	80009ce <HAL_StepperRotateCWHalfStep+0xea>
 8000994:	797b      	ldrb	r3, [r7, #5]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d119      	bne.n	80009ce <HAL_StepperRotateCWHalfStep+0xea>
		{
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_1_PIN, LOW);
 800099a:	2200      	movs	r2, #0
 800099c:	2103      	movs	r1, #3
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff feb0 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_2_PIN, LOW);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2104      	movs	r1, #4
 80009a8:	2001      	movs	r0, #1
 80009aa:	f7ff feab 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_3_PIN, HIGH);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2105      	movs	r1, #5
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff fea6 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_4_PIN, LOW);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2106      	movs	r1, #6
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff fea1 	bl	8000704 <MGPIO_vWriteData>
		L_u8Flag2 = 1;
 80009c2:	2301      	movs	r3, #1
 80009c4:	717b      	strb	r3, [r7, #5]
		L_u8Counter--;
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	3b01      	subs	r3, #1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	e095      	b.n	8000afa <HAL_StepperRotateCWHalfStep+0x216>
		}
		else if(L_u8Coil == 4 && L_u8Flag2 == 1)
 80009ce:	78bb      	ldrb	r3, [r7, #2]
 80009d0:	2b04      	cmp	r3, #4
 80009d2:	d119      	bne.n	8000a08 <HAL_StepperRotateCWHalfStep+0x124>
 80009d4:	797b      	ldrb	r3, [r7, #5]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d116      	bne.n	8000a08 <HAL_StepperRotateCWHalfStep+0x124>
		{
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_1_PIN, LOW);
 80009da:	2200      	movs	r2, #0
 80009dc:	2103      	movs	r1, #3
 80009de:	2001      	movs	r0, #1
 80009e0:	f7ff fe90 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_2_PIN, HIGH);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2104      	movs	r1, #4
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff fe8b 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_3_PIN, HIGH);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2105      	movs	r1, #5
 80009f2:	2001      	movs	r0, #1
 80009f4:	f7ff fe86 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_4_PIN, LOW);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2106      	movs	r1, #6
 80009fc:	2001      	movs	r0, #1
 80009fe:	f7ff fe81 	bl	8000704 <MGPIO_vWriteData>
		L_u8Flag2 = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	717b      	strb	r3, [r7, #5]
 8000a06:	e078      	b.n	8000afa <HAL_StepperRotateCWHalfStep+0x216>
		}

		/* 3rd */
		else if(L_u8Coil == 5 && L_u8Flag3 == 0)
 8000a08:	78bb      	ldrb	r3, [r7, #2]
 8000a0a:	2b05      	cmp	r3, #5
 8000a0c:	d11c      	bne.n	8000a48 <HAL_StepperRotateCWHalfStep+0x164>
 8000a0e:	793b      	ldrb	r3, [r7, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d119      	bne.n	8000a48 <HAL_StepperRotateCWHalfStep+0x164>
		{
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_1_PIN, LOW);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2103      	movs	r1, #3
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff fe73 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_2_PIN, HIGH);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	2104      	movs	r1, #4
 8000a22:	2001      	movs	r0, #1
 8000a24:	f7ff fe6e 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_3_PIN, LOW);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f7ff fe69 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_4_PIN, LOW);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2106      	movs	r1, #6
 8000a36:	2001      	movs	r0, #1
 8000a38:	f7ff fe64 	bl	8000704 <MGPIO_vWriteData>
		L_u8Flag3 = 1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	713b      	strb	r3, [r7, #4]
		L_u8Counter--;
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	71fb      	strb	r3, [r7, #7]
 8000a46:	e058      	b.n	8000afa <HAL_StepperRotateCWHalfStep+0x216>
		}
		else if(L_u8Coil == 5 && L_u8Flag3 == 1)
 8000a48:	78bb      	ldrb	r3, [r7, #2]
 8000a4a:	2b05      	cmp	r3, #5
 8000a4c:	d119      	bne.n	8000a82 <HAL_StepperRotateCWHalfStep+0x19e>
 8000a4e:	793b      	ldrb	r3, [r7, #4]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d116      	bne.n	8000a82 <HAL_StepperRotateCWHalfStep+0x19e>
		{
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_1_PIN, HIGH);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2103      	movs	r1, #3
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f7ff fe53 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_2_PIN, HIGH);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2104      	movs	r1, #4
 8000a62:	2001      	movs	r0, #1
 8000a64:	f7ff fe4e 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_3_PIN, LOW);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2105      	movs	r1, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff fe49 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_4_PIN, LOW);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2106      	movs	r1, #6
 8000a76:	2001      	movs	r0, #1
 8000a78:	f7ff fe44 	bl	8000704 <MGPIO_vWriteData>
		L_u8Flag3 = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	713b      	strb	r3, [r7, #4]
 8000a80:	e03b      	b.n	8000afa <HAL_StepperRotateCWHalfStep+0x216>
		}

		/* 4th */
		else if(L_u8Coil == 6 && L_u8Flag4 == 0)
 8000a82:	78bb      	ldrb	r3, [r7, #2]
 8000a84:	2b06      	cmp	r3, #6
 8000a86:	d11c      	bne.n	8000ac2 <HAL_StepperRotateCWHalfStep+0x1de>
 8000a88:	78fb      	ldrb	r3, [r7, #3]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d119      	bne.n	8000ac2 <HAL_StepperRotateCWHalfStep+0x1de>
		{
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_1_PIN, HIGH);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2103      	movs	r1, #3
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff fe36 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_2_PIN, LOW);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff fe31 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_3_PIN, LOW);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2105      	movs	r1, #5
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff fe2c 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_4_PIN, LOW);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2106      	movs	r1, #6
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff fe27 	bl	8000704 <MGPIO_vWriteData>
		L_u8Flag4 = 1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	70fb      	strb	r3, [r7, #3]
		L_u8Counter--;
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	e01b      	b.n	8000afa <HAL_StepperRotateCWHalfStep+0x216>
		}
		else if(L_u8Coil == 6 && L_u8Flag4 == 1)
 8000ac2:	78bb      	ldrb	r3, [r7, #2]
 8000ac4:	2b06      	cmp	r3, #6
 8000ac6:	d118      	bne.n	8000afa <HAL_StepperRotateCWHalfStep+0x216>
 8000ac8:	78fb      	ldrb	r3, [r7, #3]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d115      	bne.n	8000afa <HAL_StepperRotateCWHalfStep+0x216>
		{
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_1_PIN, HIGH);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f7ff fe16 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_2_PIN, LOW);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2104      	movs	r1, #4
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fe11 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_3_PIN, LOW);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2105      	movs	r1, #5
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fe0c 	bl	8000704 <MGPIO_vWriteData>
		MGPIO_vWriteData(STEPPER_MOTOR_PORT , STEPPER_MOTOR_COIL_4_PIN, HIGH);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2106      	movs	r1, #6
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff fe07 	bl	8000704 <MGPIO_vWriteData>
		L_u8Flag4 = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	70fb      	strb	r3, [r7, #3]
		}
		Delay_vMsIn16MHz(25);
 8000afa:	2019      	movs	r0, #25
 8000afc:	f7ff fb38 	bl	8000170 <Delay_vMsIn16MHz>
	for(L_u8Counter = 0; L_u8Counter < STEPPER_MOTOR_STEPS; L_u8Counter++)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	3301      	adds	r3, #1
 8000b04:	71fb      	strb	r3, [r7, #7]
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b2f      	cmp	r3, #47	; 0x2f
 8000b0a:	f67f aefd 	bls.w	8000908 <HAL_StepperRotateCWHalfStep+0x24>
	}
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <main>:
#include "SD_MODULE_interface.h"
#include "Stepper_interface.h"
/*======================================*/

int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
//	volatile int i = 0;

	/* Initialize System Clock */
	MRCC_vInitSystemCLK();
 8000b1c:	f7ff fe9c 	bl	8000858 <MRCC_vInitSystemCLK>

	/* Enable Clock for IOPBEN on APB2 bus */
	MRCC_vEnableClock(APB2 , _PERIPHERAL_EN_IOPBEN);
 8000b20:	2103      	movs	r1, #3
 8000b22:	2002      	movs	r0, #2
 8000b24:	f7ff fe5c 	bl	80007e0 <MRCC_vEnableClock>

	/* Reset CRL Register */
	MGIO_vResetCR(_GPIOB_PORT, GPIO_PIN_3);
 8000b28:	2103      	movs	r1, #3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff fb46 	bl	80001bc <MGIO_vResetCR>

	/* Stepper Init */
	HAL_StepperInit();
 8000b30:	f7ff febc 	bl	80008ac <HAL_StepperInit>

    /* Loop forever */
	while(1)
	{
		/* Stepper Rotate */
		HAL_StepperRotateCWHalfStep();
 8000b34:	f7ff fed6 	bl	80008e4 <HAL_StepperRotateCWHalfStep>
 8000b38:	e7fc      	b.n	8000b34 <main+0x1c>
	...

08000b3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b40:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	; (8000b78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	; (8000b7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <LoopForever+0xe>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	; (8000b88 <LoopForever+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b6a:	f000 f811 	bl	8000b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6e:	f7ff ffd3 	bl	8000b18 <main>

08000b72 <LoopForever>:

LoopForever:
  b LoopForever
 8000b72:	e7fe      	b.n	8000b72 <LoopForever>
  ldr   r0, =_estack
 8000b74:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b80:	08000bf8 	.word	0x08000bf8
  ldr r2, =_sbss
 8000b84:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b88:	20000020 	.word	0x20000020

08000b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_2_IRQHandler>
	...

08000b90 <__libc_init_array>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	2600      	movs	r6, #0
 8000b94:	4d0c      	ldr	r5, [pc, #48]	; (8000bc8 <__libc_init_array+0x38>)
 8000b96:	4c0d      	ldr	r4, [pc, #52]	; (8000bcc <__libc_init_array+0x3c>)
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	10a4      	asrs	r4, r4, #2
 8000b9c:	42a6      	cmp	r6, r4
 8000b9e:	d109      	bne.n	8000bb4 <__libc_init_array+0x24>
 8000ba0:	f000 f81a 	bl	8000bd8 <_init>
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	4d0a      	ldr	r5, [pc, #40]	; (8000bd0 <__libc_init_array+0x40>)
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <__libc_init_array+0x44>)
 8000baa:	1b64      	subs	r4, r4, r5
 8000bac:	10a4      	asrs	r4, r4, #2
 8000bae:	42a6      	cmp	r6, r4
 8000bb0:	d105      	bne.n	8000bbe <__libc_init_array+0x2e>
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
 8000bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bb8:	4798      	blx	r3
 8000bba:	3601      	adds	r6, #1
 8000bbc:	e7ee      	b.n	8000b9c <__libc_init_array+0xc>
 8000bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bc2:	4798      	blx	r3
 8000bc4:	3601      	adds	r6, #1
 8000bc6:	e7f2      	b.n	8000bae <__libc_init_array+0x1e>
 8000bc8:	08000bf0 	.word	0x08000bf0
 8000bcc:	08000bf0 	.word	0x08000bf0
 8000bd0:	08000bf0 	.word	0x08000bf0
 8000bd4:	08000bf4 	.word	0x08000bf4

08000bd8 <_init>:
 8000bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bda:	bf00      	nop
 8000bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bde:	bc08      	pop	{r3}
 8000be0:	469e      	mov	lr, r3
 8000be2:	4770      	bx	lr

08000be4 <_fini>:
 8000be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be6:	bf00      	nop
 8000be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bea:	bc08      	pop	{r3}
 8000bec:	469e      	mov	lr, r3
 8000bee:	4770      	bx	lr
